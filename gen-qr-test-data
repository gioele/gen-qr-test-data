#!/usr/bin/env ruby

# This is free and unencumbered software released into the public domain.
# See the `UNLICENSE` file or <http://unlicense.org/> for more details.

require 'time'
require 'qrencoder'

require 'test-strings'

APP_VERSION = "0.2"

VERSIONS = [4, 8, 16, 32, 40]
EC_LEVELS = [:low, :medium, :quarter, :high]
MODES = [:numeric, :ascii]

def is_numeric(string)
	zero = "0".bytes.first
	nine = "9".bytes.first

	return string.bytes.all? { |b| b.between?(zero, nine) }
end

def gen_qr_tests
	$stdout.puts "# generated by `gen-qr-test-suite` v#{APP_VERSION}"
	$stdout.puts "# #{Time.now.utc.rfc2822}"
	$stdout.puts
	$stdout.puts "# This is free and unencumbered software released into the public domain."
	$stdout.puts "# See the `UNLICENSE` file or <http://unlicense.org/> for more details."
	$stdout.puts
	$stdout.puts "QR_TEST_DATA = []"

	tests = []

	n_strings_1 = STRINGS_MIN_1.each_with_index.map { |s, i| [i, s] }
	tests += n_strings_1.product([1] + VERSIONS, EC_LEVELS, MODES)

	n_strings_4 = STRINGS_MIN_4.each_with_index.map { |s, i| [i, s] }
	tests += n_strings_4.product(VERSIONS, EC_LEVELS, MODES)

	tests.each do |test|
		gen_test(test)
	end
end

def gen_test(test)
	data, version, ec_level, mode = *test
	index, string = *data

	if mode == :numeric && !is_numeric(string) then return end

	test_name = "QRtest_#{index}_#{version}_#{ec_level}_#{mode}"

	opts = {
		:version => version,
		:correction => ec_level,
		:mode => mode,
		:case_sensitive => true,
	}

	qr_code = QREncoder.encode(string, opts)
	pixels = qr_code.pixels.map { |row| row.map { |x| x == 1 } }

	$stdout.puts "QR_TEST_DATA << {"
	$stdout.puts "\t:name => #{test_name.inspect},"
	$stdout.puts "\t:data_index => #{index.inspect},"
	$stdout.puts "\t:version => #{version.inspect},"
	$stdout.puts "\t:correction => #{ec_level.inspect},"
	$stdout.puts "\t:mode => #{mode.inspect},"
	$stdout.puts "\t:case_sensitive => true,"
	$stdout.puts "\t:data => #{string.inspect},"
	$stdout.puts "\t:result => " + pp(pixels)
	$stdout.puts "}"
end

def pp(matrix)
	out = ""

	out << "["
	out << "\n"
	matrix.each do |row|
		out << "\t\t"
		out << row.inspect
		out << ","
		out << "\n"
	end
	out << "\t]"

	return out
end

gen_qr_tests
